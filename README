list-abs
--------

These are abstractions implementing common list operations. Included are in
alphabetical order:

list-abs.pd

  change floats in a lists to their absolute values.

list-add.pd

  Add the floats in two lists element by element.

list-accum.pd

  sum all floats in a list.

list-clip.pd

  restrict the floats in a list between two borders. Applies [clip] on list
  floats.

list-delete.pd

  delete element at position POS from list.

list-demux.pd

  route lists to different outlets (like demux in zexy). Not an abstraction,
  just a patch illustrating the idiom.

list-drip.pd

  serialize a list automatically (like drip in zexy).

list-drip2.pd

  serialize two lists in sync as long as first list lasts.

list-dripslow.pd

  serialize a list on demand: each bang will output the next element.

list-emath.pd

  do elementwise math operations on list. Like list-math, but for two lists
  instead of list and scalar. Also see list-mult, list-sub and list-add, which
  are wrappers around list-emath.

list-equalize.pd

  scale a list so that all float elements sum up to 1

list-insert.pd

  insert LIST before element at position POS

list-inter.pd

  element-wise linear interpolation between two (float) lists.
  list-inter-example-gem.pd shows a more complicated usage example, but
  requires gem for visualisation.

list-l2s.pd

  Concatenate a list into a single symbol using ARG1 as delimiter. Delimiter
  can be set through second inlet.

list-lastx.pd

  get a list containing the last x atoms received. (Previously known as
  "last-x.pd")

list-len.pd

  calculate length of a list.

list-makefilename.pd

  apply [makefilename] on list elements, if they are symbols.

list-math.pd

  apply [expr OP] with OP in (+,-,*,/) on list elements, if they are floats.

list-minmax.pd

  find minimum and maximum float in a list.

list-moses.pd

  A [moses] for lists: Route incoming list according to how an element compares
  against a test float. It's possible to set the position of the element to
  compare using a zero-based index. (Not to be confused with the [listmoses]
  external which does something completely different!)

list-mult.pd

  multiply the floats in two lists element by element.

list-normalize.pd

  normalize a list to (-1,1) like you can normalize a Pd array.

list-rev.pd

  reverse a list.

list-rot.pd

  rotate a list (move X elements from front to back). 

list-sieve.pd

  let only those incoming floats pass, that have been found in a test list.

list-splat.pd

  an advanced [list split] which also accepts negative indices to split off
  elements from the back of a list. Otherwise compatible to [list split] so it
  can be used as a drop-in replacement.

list-sub.pd

  substract the floats in two lists element by element.

sroute.pd

  a settable [route] object for a single selector.

take-two.pd

  take a list as input and print all combinations of length two without repetition.

triple-scale.pd

  this actually is not using [list]: Interpolate between two (x,y,z)-points.
  Also see [list-inter], which is more powerful.
